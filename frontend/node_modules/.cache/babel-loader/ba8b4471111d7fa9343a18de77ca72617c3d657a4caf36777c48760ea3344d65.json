{"ast":null,"code":"var _jsxFileName = \"/Users/gregrell/git/djangoreactcrudproject/frontend/src/pages/NotePage.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { useAuthContext } from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NotePage = ({\n  params\n}) => {\n  _s();\n  const [note, setNote] = useState(null);\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [IsNew, setIsNew] = useState(false);\n  const authcontext = useAuthContext();\n  useEffect(() => {\n    if (id === \"new\") {\n      setIsNew(true);\n    }\n    if (id !== \"new\") {\n      getNote();\n    }\n  }, [id]);\n  let getNote = async () => {\n    const requestOptions = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `${authcontext.authHeader()}`\n      }\n    };\n    let response = await fetch(`/api/notes/${id}`, requestOptions);\n    let data = await response.json();\n    setNote(data);\n  };\n  const handleinputchange = e => {\n    const textareavalue = e.target.value;\n    setNote({\n      body: textareavalue\n    });\n  };\n  let updateNote = async () => {\n    const requestOptions = {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `${authcontext.authHeader()}`\n      },\n      body: JSON.stringify(note)\n    };\n    const response = await fetch(`/api/notes/${id}/update`, requestOptions);\n  };\n  let createNote = async () => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `${authcontext.authHeader()}`\n      },\n      body: JSON.stringify(note)\n    };\n    const response = await fetch(`/api/notes/create/`, requestOptions);\n  };\n  let deleteNote = async () => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `${authcontext.authHeader()}`\n      },\n      body: JSON.stringify(note)\n    };\n    const response = await fetch(`/api/notes/${id}/delete`, requestOptions);\n  };\n  const handleBackButtonClick = () => {\n    if (!IsNew) {\n      updateNote();\n    }\n    if (IsNew && note !== null && note !== void 0 && note.body) {\n      createNote();\n    }\n    navigate(-1);\n  };\n  const handleDeleteButtonClick = () => {\n    if (!IsNew) {\n      deleteNote();\n    }\n    navigate(-1);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBackButtonClick,\n      children: \" back \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), !IsNew && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDeleteButtonClick,\n      children: \" delete \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 18\n    }, this), \"Body of \", id, \":\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n      defaultValue: note === null || note === void 0 ? void 0 : note.body,\n      onChange: handleinputchange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(NotePage, \"at27ZlGDT9nR1gO1oKOa/DGqydU=\", false, function () {\n  return [useParams, useNavigate, useAuthContext];\n});\n_c = NotePage;\nexport default NotePage;\nvar _c;\n$RefreshReg$(_c, \"NotePage\");","map":{"version":3,"names":["React","useParams","useNavigate","useState","useEffect","useAuthContext","jsxDEV","_jsxDEV","Fragment","_Fragment","NotePage","params","_s","note","setNote","id","navigate","IsNew","setIsNew","authcontext","getNote","requestOptions","method","headers","Authorization","authHeader","response","fetch","data","json","handleinputchange","e","textareavalue","target","value","body","updateNote","JSON","stringify","createNote","deleteNote","handleBackButtonClick","handleDeleteButtonClick","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","onChange","_c","$RefreshReg$"],"sources":["/Users/gregrell/git/djangoreactcrudproject/frontend/src/pages/NotePage.jsx"],"sourcesContent":["import React from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { useAuthContext } from \"../context/AuthContext\";\n\nconst NotePage = ({ params }) => {\n  const [note, setNote] = useState(null);\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [IsNew, setIsNew] = useState(false);\n\n  const authcontext = useAuthContext();\n\n  useEffect(() => {\n    if (id === \"new\") {\n      setIsNew(true);\n    }\n    if (id !== \"new\") {\n      getNote();\n    }\n  }, [id]);\n\n  let getNote = async () => {\n    const requestOptions = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `${authcontext.authHeader()}`,\n      },\n    };\n    let response = await fetch(`/api/notes/${id}`, requestOptions);\n    let data = await response.json();\n    setNote(data);\n  };\n\n  const handleinputchange = (e) => {\n    const textareavalue = e.target.value;\n    setNote({ body: textareavalue });\n  };\n\n  let updateNote = async () => {\n    const requestOptions = {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `${authcontext.authHeader()}`,\n      },\n      body: JSON.stringify(note),\n    };\n\n    const response = await fetch(`/api/notes/${id}/update`, requestOptions);\n  };\n\n  let createNote = async () => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `${authcontext.authHeader()}`,\n      },\n      body: JSON.stringify(note),\n    };\n\n    const response = await fetch(`/api/notes/create/`, requestOptions);\n  };\n\n  let deleteNote = async () => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `${authcontext.authHeader()}`,\n      },\n      body: JSON.stringify(note),\n    };\n\n    const response = await fetch(`/api/notes/${id}/delete`, requestOptions);\n  };\n  const handleBackButtonClick = () => {\n    if (!IsNew) {\n      updateNote();\n    }\n    if (IsNew && note?.body) {\n      createNote();\n    }\n    navigate(-1);\n  };\n\n  const handleDeleteButtonClick = () => {\n    if (!IsNew) {\n      deleteNote();\n    }\n    navigate(-1);\n  };\n\n  return (\n    <>\n      <button onClick={handleBackButtonClick}> back </button>\n      {!IsNew && <button onClick={handleDeleteButtonClick}> delete </button>}\n      Body of {id}:\n      <textarea defaultValue={note?.body} onChange={handleinputchange} />\n    </>\n  );\n};\n\nexport default NotePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}